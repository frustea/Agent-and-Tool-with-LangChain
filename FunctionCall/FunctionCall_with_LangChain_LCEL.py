

import os
import openai

from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv()) # read local .env file
openai.api_key = os.environ['OPENAI_API_KEY']
from langchain.prompts import ChatPromptTemplate
from langchain.chat_models import ChatOpenAI
from langchain.schema.output_parser import StrOutputParser
from langchain.schema.runnable import RunnableMap
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import DocArrayInMemorySearch


## Rung prompt on Langchain
prompt = ChatPromptTemplate.from_template(
    "I have a tirangle. two side of them have legnth of  {x} and {y}. what is the length of the third one?. explain your method step by step"
)
model = ChatOpenAI()
output_parser = StrOutputParser()

chain = prompt | model | output_parser
chain.invoke({"x": 3,"y":4})

## vectordatabse 
## Runnnable map for input, retriver 

vectorstore = DocArrayInMemorySearch.from_texts(
    ["text1:In mathematics, and specifically in group theory, a non-abelian group, sometimes called a non-commutative group, is a group (G, ∗) in which there exists at least one pair of elements a and b of G, such that a ∗ b ≠ b ∗ a.[1][2] This class of groups contrasts with the abelian groups, where all pairs of group elements commute.",
      "text2:In mathematics, a group is a set with an operation that satisfies the following constraints: the operation is associative and has an identity element, and every element of the set has an inverse element. Many mathematical structures are groups endowed with other properties. For example, the integers with the addition operation form an infinite group, which is generated by a single element called 1 (these properties characterize the integers in a unique way)."],
    embedding=OpenAIEmbeddings()
)
retriever = vectorstore.as_retriever()

retriever = vectorstore.as_retriever()
template = """Answer the question based only on the following context:
{context}

Question: {question}
"""
prompt = ChatPromptTemplate.from_template(template)

inputs= RunnableMap({
    "context": lambda x: retriever.get_relevant_documents(x["question"]),
    "question": lambda x: x["question"]
}) 
chain=inputs | prompt | model | output_parser
chain.invoke({"question": "what is best description of the gluon in the particle physcis?"})


## feeding function with Bind 
prompt = ChatPromptTemplate.from_messages(
    [
        ("human", "{input}")
    ]
)

functions = [
    {
      "name": "weather_search",
      "description": "Search for weather given an airport code",
      "parameters": {
        "type": "object",
        "properties": {
          "airport_code": {
            "type": "string",
            "description": "The airport code to get the weather for"
          },
        },
        "required": ["airport_code"]
      }
    },
        {
      "name": "sports_search",
      "description": "Search for news of recent sport events",
      "parameters": {
        "type": "object",
        "properties": {
          "team_name": {
            "type": "string",
            "description": "The sports team to search for"
          },
        },
        "required": ["team_name"]
      }
    }
  ]

model = ChatOpenAI(temperature=0).bind(functions=functions)
chain= prompt |model | output_parser
chain.invoke({"input": "how is the weather in SF airport ?"})